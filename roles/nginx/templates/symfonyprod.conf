# vi: set ft=nginx :

# Added a bunch of secure parmaters recommended by:
# https://www.owasp.org/index.php/SCG_WS_nginx
# https://gist.github.com/plentz/6737338

# don't send the nginx version number in error pages and Server header
server_tokens off;

# X-Frame-Options is to prevent from clickJacking attack
# don't allow the browser to render the page inside an frame or iframe
add_header X-Frame-Options SAMEORIGIN;

# disable content-type sniffing on some browsers.
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter
add_header X-XSS-Protection "1; mode=block";

server {
        listen 443 ssl;
        server_name {{ nginx.server_name }};
        root {{ nginx.webroot }};

        # Certificates to enable SSL
        ssl_certificate /etc/letsencrypt/live/{{ nginx.server_name }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ nginx.server_name }}/privkey.pem;

        # Disable SSLv3 because it sucks
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # enable server-side protection from BEAST attacks
        ssl_prefer_server_ciphers on;

        # Diffie-Hellman parameter to increase security when doing key echanges
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        # Disable insecure ciphers suite. For example, MD5, DES, RC4, PSK
        ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:@STRENGTH";

        # enable session resumption to improve https performance
        # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
        ssl_session_timeout 1h;
        ssl_session_cache shared:SSL:50m;

        # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
        # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
        resolver 8.8.8.8;
        ssl_stapling on;
        ssl_stapling_verify on;

        # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
        # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

        # Size Limits & Buffer Overflows
        # the size may be configured based on the needs.
        client_body_buffer_size  100K;
        client_header_buffer_size 1K;
        client_max_body_size 5M;
        large_client_header_buffers 2 1K;

        # Mitigate slow HTTP DOS attacks
        client_body_timeout   10;
        client_header_timeout 10;
        keepalive_timeout     5 5;
        send_timeout          10;

        location / {
                try_files $uri /app.php$is_args$args;

        }

        location ~ /.well-known {
                allow all;
        }

        {% for sendfile in nginx.sendfile_dirs %}
            location {{ sendfile.location }} {
                internal;
                alias   {{ sendfile.alias }};
            }
        {% endfor %}

        location ~ ^/app\.php(/|$) {
                fastcgi_split_path_info ^(.+\.php)(/.*)$;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                fastcgi_param DOCUMENT_ROOT $realpath_root;
                fastcgi_index app.php;
                send_timeout 1800;
                fastcgi_read_timeout 1800;
                fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;
        }
}

server {
        listen 80;
        listen 443 ssl;
        server_name *.{{ nginx.server_name }} {{ nginx.redirect_names|join(' ') }} *.{{ nginx.redirect_names|join(' *.') }};

        return 301 https://{{ nginx.server_name }}$request_uri;
}
